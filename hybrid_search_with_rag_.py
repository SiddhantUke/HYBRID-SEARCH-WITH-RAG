# -*- coding: utf-8 -*-
"""Hybrid Search With RAG .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksrmYQ2gCmSPPYkoI2OEAtLOTQuhyzL2
"""

!pip install --upgrade --quiet pinecone-client pinecone-text pinecone-notebooks

api_key = 'pcsk_4ULNwR_2DBn2Uwwz8HV1CGaqKozndhJPJggKnrqNckfyPBWoTUcLKTUipot6v7MKomsscP'

!pip install langchain_community

from langchain_community.retrievers import PineconeHybridSearchRetriever



pip install pinecone

from pinecone import Pinecone, ServerlessSpec

pc = Pinecone(api_key="pcsk_4ULNwR_2DBn2Uwwz8HV1CGaqKozndhJPJggKnrqNckfyPBWoTUcLKTUipot6v7MKomsscP")







import os
from pinecone import Pinecone,ServerlessSpec
index_name="hybrid-search-langchain-pinecone"
## initialize the Pinecone client
pc=Pinecone(api_key=api_key)

#create the index
if index_name not in pc.list_indexes().names():
    pc.create_index(
        name=index_name,
        dimension=384,  # dimensionality of dense model
        metric="dotproduct",  # sparse values supported only for dotproduct
        spec=ServerlessSpec(cloud="aws", region="us-east-1"),
    )

index=pc.Index(index_name)
index

!pip install langchain_huggingface

## vector embedding and sparse matrix
import os
from dotenv import load_dotenv
load_dotenv()

# os.environ["HF_TOKEN"]=os.getenv("HF_TOKEN")

from langchain_huggingface import HuggingFaceEmbeddings
embeddings=HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
embeddings

from pinecone_text.sparse import BM25Encoder

bm25_encoder=BM25Encoder().default()
bm25_encoder

sentences=[
    "In 2023, I watched Attack on Titan: The Final Season"

    "In 2022, I watched Demon Slayer: Entertainment District Arc"

    "In 2021, I watched Jujutsu Kaisen",

]

## tfidf values on these sentence
bm25_encoder.fit(sentences)

## store the values to a json file
bm25_encoder.dump("bm25_values.json")

# load to your BM25Encoder object
bm25_encoder = BM25Encoder().load("bm25_values.json")

retriever=PineconeHybridSearchRetriever(embeddings=embeddings,sparse_encoder=bm25_encoder,index=index)

retriever

retriever.add_texts(
    [
    "In 2023, I watched Attack on Titan: The Final Season",

    "In 2022, I watched Demon Slayer: Entertainment District Arc",

    "In 2021, I watched Jujutsu Kaisen",

]
)

retriever.invoke("Which anime did i watch 2022")





